class Scaffolding::IncomingWebhooksTransformer < Scaffolding::Transformer
  attr_accessor :provider_name

  def initialize(provider_name, cli_options = {})
    super("", "", cli_options)
    self.provider_name = provider_name
  end

  def scaffold_incoming_webhook
    files = [
      "./app/models/webhooks/incoming/bullet_train_webhook.rb",
      "./app/controllers/webhooks/incoming/bullet_train_webhooks_controller.rb"
    ]

    files.each do |name|
      if File.directory?(resolve_template_path(name))
        scaffold_directory(name)
      else
        scaffold_file(name)
      end
    end

    # Rename files according to their provider name.
    file_name_hook = "bullet_train_webhook"
    new_model_file_name, new_controller_file_name = files.map { |file| file.gsub(file_name_hook, replacement_for(file_name_hook))}
    File.rename("./app/models/webhooks/incoming/bullet_train_webhook.rb", new_model_file_name)
    File.rename("./app/controllers/webhooks/incoming/bullet_train_webhooks_controller.rb", new_controller_file_name)

    # Since we eject the model from this repository, we don't need the
    # extra model generated by `rails g model` (just the migration).
    File.delete("./app/models/webhooks_incoming_#{replacement_for(file_name_hook)}.rb")

    # Set up the model's `verify_authenticity` method to return `true`.
    model_file_lines = File.readlines(new_model_file_name)
    comment_lines = [
      "# You can implement your authenticity verification logic in either\n",
      "# the newly scaffolded model or controller for your incoming webhooks.\n"
    ]
    lines_to_ignore = [
      "  # there are many ways a service might ask you to verify the validity of a webhook.\n",
      "  # whatever that method is, you would implement it here.\n"
    ]

    model_file_lines = File.readlines(new_model_file_name)
    new_model_file_lines = File.open(new_model_file_name).map.with_index do |line, idx|
      if line.match?("def verify_authenticity")
        indentation = Scaffolding::BlockManipulator.indentation_of(idx, model_file_lines)
        new_comment_lines = comment_lines.map{|comment_line| "#{indentation}#{comment_line}"}.join

        new_comment_lines +
        "#{line}" +
        "#{indentation}  true\n"
      elsif lines_to_ignore.include?(line)
        next
      else
        line
      end
    end

    Scaffolding::FileManipulator.write(new_model_file_name, new_model_file_lines)
  end

  def transform_string(string)
    [
      "Webhooks::Incoming::BulletTrainWebhook"
    ].each do |needle|
      string = string.gsub(needle, replacement_for(needle))
    end
    string
  end

  def replacement_for(string)
    case string
    when "bullet_train_webhook"
      "#{provider_name.tableize.singularize}_webhook"
    when "Webhooks::Incoming::BulletTrainWebhook"
      "Webhooks::Incoming::#{provider_name}Webhook"
    end
  end
end
